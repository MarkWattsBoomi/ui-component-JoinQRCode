!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=function(){function e(e){if(this.ExternalId=null,this.IsSelected=!1,this.Order=0,this.Properties={},e&&e[0]){var t=e[0];this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected;for(var n=0,o=t.properties;n<o.length;n++){var i=o[n];this.Properties[i.developerName]=new r.FlowObjectDataProperty(i)}}}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:null,internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[]}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.iObjectData=function(){for(var e=[],t=0,n=Object.keys(this.properties);t<n.length;t++){var r=n[t];e.push(this.properties[r].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:e}},e.prototype.iFlowObjectDataArray=function(){var e=[];return e.push(this.iObjectData()),e},e}();t.FlowObjectData=o},function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),i=n(3);!function(e){e[e.ContentString=0]="ContentString",e[e.ContentNumber=1]="ContentNumber",e[e.ContentObject=2]="ContentObject",e[e.ContentBoolean=3]="ContentBoolean",e[e.ContentList=4]="ContentList",e[e.ContentPassword=5]="ContentPassword",e[e.ContentContent=6]="ContentContent",e[e.ContentDateTime=7]="ContentDateTime",e[e.ContentEncrypted=8]="ContentEncrypted"}(r=t.eContentType||(t.eContentType={}));var a=function(){function e(e){switch(this.ContentType=r[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case r.ContentObject:this.Value=e.objectData&&e.objectData[0]?new o.FlowObjectData(e.objectData):null;break;case r.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowField=function(){var e,t=[];switch(this.ContentType){case r.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case r.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentType:r[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(2),i=n(0);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(r=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var r=n[t];this.Items.push(new i.FlowObjectData([r]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),e.prototype.sort=function(e,t){return void 0===e&&(e=r.ascending),e===r.ascending?t?this.Items.sort(function(e,n){var r,i;switch(e.properties[t].contentType){case o.eContentType.ContentNumber:r=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case o.eContentType.ContentDateTime:r=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:r=e.properties[t].value,i=n.properties[t].value}switch(!0){case r<i:return-1;case r>i:return 1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order}):t?this.Items.sort(function(e,n){switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order})},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.iFlowObjectDataArray=function(){for(var e=[],t=0,n=this.Items;t<n.length;t++){var r=n[t];e.push(r.iObjectData())}return e},e.prototype.getItemWithPropertyName=function(e,t,n){for(var r=0,i=this.Items;r<i.length;r++){var a=i[r];if(a.properties[e]&&a.properties[e].value){var u=a.properties[e].value,s=t;switch(a.properties[e].contentType){case o.eContentType.ContentString:u=u.toLowerCase(),s=s.toLowerCase();break;case o.eContentType.ContentNumber:u=u,s=parseFloat(s.toLowerCase());break;case o.eContentType.ContentBoolean:u=u,s="true"===new String(s).toLowerCase()}if(u===s)return a.properties[n]}}return null},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,r=this.Items;n<r.length;n++){var i=r[n];if(i.properties[e]&&i.properties[e].value){var a=i.properties[e].value,u=t;switch(i.properties[e].contentType){case o.eContentType.ContentString:a=a.toLowerCase(),u=u.toLowerCase();break;case o.eContentType.ContentNumber:a=a,u=parseFloat(u.toLowerCase());break;case o.eContentType.ContentBoolean:a=a,u="true"===new String(u).toLowerCase()}if(a===u)return i}}},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),e}();t.FlowAttribute=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(6))},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),a=n(7);n(13);var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this.model.joinUri,t=this.model.width>0?this.model.width:200,n=this.attributes.logo&&this.attributes.logo.value||"",r=this.attributes.logoWidth?parseInt(this.attributes.logoWidth.value):50,o=this.attributes.logoHeight?parseInt(this.attributes.logoHeight.value):50,u=this.attributes.logoOpacity?parseInt(this.attributes.logoOpacity.value):50;return i.createElement(a.QRCode,{value:e,ecLevel:"M",size:t,padding:10,bgColor:"#fefefe",fgColor:"#000000",logoImage:n,logoWidth:r,logoHeight:o,logoOpacity:u})},t}(n(14).FlowComponent);manywho.component.register("JoinQRCode",u),t.default=u},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(8),u=n(11),s=n(1),c=n(12),l=function(e){function t(t){var n=e.call(this,t)||this;return n.canvas=s.createRef(),n}return o(t,e),t.utf16to8=function(e){var t,n,r="",o=e.length;for(t=0;t<o;t++)(n=e.charCodeAt(t))>=1&&n<=127?r+=e.charAt(t):n>2047?(r+=String.fromCharCode(224|n>>12&15),r+=String.fromCharCode(128|n>>6&63),r+=String.fromCharCode(128|n>>0&63)):(r+=String.fromCharCode(192|n>>6&31),r+=String.fromCharCode(128|n>>0&63));return r},t.prototype.shouldComponentUpdate=function(e){return!a(this.props,e)},t.prototype.componentDidMount=function(){this.update()},t.prototype.componentDidUpdate=function(){this.update()},t.prototype.update=function(){var e=this.props,n=e.value,r=e.ecLevel,o=e.size,i=e.bgColor,a=e.fgColor,s=e.logoImage,l=e.logoWidth,f=e.logoHeight,p=e.logoOpacity,h=u(0,r);h.addData(t.utf16to8(n)),h.make();var d=c.findDOMNode(this.canvas.current),y=d.getContext("2d"),g=o/h.getModuleCount(),v=o/h.getModuleCount(),b=window.devicePixelRatio||1;d.height=d.width=o*b,y.scale(b,b);for(var m=0;m<h.getModuleCount();m++)for(var w=0;w<h.getModuleCount();w++){y.fillStyle=h.isDark(m,w)?a:i;var O=Math.ceil((w+1)*g)-Math.floor(w*g),j=Math.ceil((m+1)*v)-Math.floor(m*v);y.fillRect(Math.round(w*g),Math.round(m*v),O,j)}if(s){var C=new Image;C.crossOrigin="Anonymous",C.onload=function(){var e=l||.2*o,t=f||e,n=(o-e)/2,r=(o-t)/2;C.width=e,C.height=t,y.save(),y.globalAlpha=p,y.drawImage(C,n,r,e,t),y.restore()},C.src=s}},t.prototype.render=function(){return s.createElement("canvas",{id:"react-qrcode-logo",height:this.props.size,width:this.props.size,style:i({height:this.props.size+"px",width:this.props.size+"px",padding:100*this.props.padding/this.props.size+"%",background:this.props.bgColor},this.props.style),ref:this.canvas})},t.defaultProps={value:"https://reactjs.org/",ecLevel:"M",size:150,padding:10,bgColor:"#FFFFFF",fgColor:"#000000",logoOpacity:1},t}(s.Component);t.QRCode=l},function(e,t,n){(function(e,n){var r=200,o="__lodash_hash_undefined__",i=1,a=2,u=9007199254740991,s="[object Arguments]",c="[object Array]",l="[object AsyncFunction]",f="[object Boolean]",p="[object Date]",h="[object Error]",d="[object Function]",y="[object GeneratorFunction]",g="[object Map]",v="[object Number]",b="[object Null]",m="[object Object]",w="[object Proxy]",O="[object RegExp]",j="[object Set]",C="[object String]",_="[object Symbol]",I="[object Undefined]",P="[object ArrayBuffer]",D="[object DataView]",T=/^\[object .+?Constructor\]$/,A=/^(?:0|[1-9]\d*)$/,S={};S["[object Float32Array]"]=S["[object Float64Array]"]=S["[object Int8Array]"]=S["[object Int16Array]"]=S["[object Int32Array]"]=S["[object Uint8Array]"]=S["[object Uint8ClampedArray]"]=S["[object Uint16Array]"]=S["[object Uint32Array]"]=!0,S[s]=S[c]=S[P]=S[f]=S[D]=S[p]=S[h]=S[d]=S[g]=S[v]=S[m]=S[O]=S[j]=S[C]=S["[object WeakMap]"]=!1;var M="object"==typeof e&&e&&e.Object===Object&&e,L="object"==typeof self&&self&&self.Object===Object&&self,F=M||L||Function("return this")(),E=t&&!t.nodeType&&t,k=E&&"object"==typeof n&&n&&!n.nodeType&&n,N=k&&k.exports===E,B=N&&M.process,x=function(){try{return B&&B.binding&&B.binding("util")}catch(e){}}(),V=x&&x.isTypedArray;function z(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function R(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function U(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var K,W,H,J=Array.prototype,G=Function.prototype,$=Object.prototype,q=F["__core-js_shared__"],Q=G.toString,Y=$.hasOwnProperty,X=(K=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+K:"",Z=$.toString,ee=RegExp("^"+Q.call(Y).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=N?F.Buffer:void 0,ne=F.Symbol,re=F.Uint8Array,oe=$.propertyIsEnumerable,ie=J.splice,ae=ne?ne.toStringTag:void 0,ue=Object.getOwnPropertySymbols,se=te?te.isBuffer:void 0,ce=(W=Object.keys,H=Object,function(e){return W(H(e))}),le=xe(F,"DataView"),fe=xe(F,"Map"),pe=xe(F,"Promise"),he=xe(F,"Set"),de=xe(F,"WeakMap"),ye=xe(Object,"create"),ge=Ue(le),ve=Ue(fe),be=Ue(pe),me=Ue(he),we=Ue(de),Oe=ne?ne.prototype:void 0,je=Oe?Oe.valueOf:void 0;function Ce(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _e(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ie;++t<n;)this.add(e[t])}function De(e){var t=this.__data__=new _e(e);this.size=t.size}function Te(e,t){var n=He(e),r=!n&&We(e),o=!n&&!r&&Je(e),i=!n&&!r&&!o&&Ye(e),a=n||r||o||i,u=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=u.length;for(var c in e)!t&&!Y.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Re(c,s))||u.push(c);return u}function Ae(e,t){for(var n=e.length;n--;)if(Ke(e[n][0],t))return n;return-1}function Se(e){return null==e?void 0===e?I:b:ae&&ae in Object(e)?function(e){var t=Y.call(e,ae),n=e[ae];try{e[ae]=void 0;var r=!0}catch(e){}var o=Z.call(e);r&&(t?e[ae]=n:delete e[ae]);return o}(e):function(e){return Z.call(e)}(e)}function Me(e){return Qe(e)&&Se(e)==s}function Le(e,t,n,r,o){return e===t||(null==e||null==t||!Qe(e)&&!Qe(t)?e!=e&&t!=t:function(e,t,n,r,o,u){var l=He(e),d=He(t),y=l?c:ze(e),b=d?c:ze(t),w=(y=y==s?m:y)==m,I=(b=b==s?m:b)==m,T=y==b;if(T&&Je(e)){if(!Je(t))return!1;l=!0,w=!1}if(T&&!w)return u||(u=new De),l||Ye(e)?ke(e,t,n,r,o,u):function(e,t,n,r,o,u,s){switch(n){case D:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case P:return!(e.byteLength!=t.byteLength||!u(new re(e),new re(t)));case f:case p:case v:return Ke(+e,+t);case h:return e.name==t.name&&e.message==t.message;case O:case C:return e==t+"";case g:var c=R;case j:var l=r&i;if(c||(c=U),e.size!=t.size&&!l)return!1;var d=s.get(e);if(d)return d==t;r|=a,s.set(e,t);var y=ke(c(e),c(t),r,o,u,s);return s.delete(e),y;case _:if(je)return je.call(e)==je.call(t)}return!1}(e,t,y,n,r,o,u);if(!(n&i)){var A=w&&Y.call(e,"__wrapped__"),S=I&&Y.call(t,"__wrapped__");if(A||S){var M=A?e.value():e,L=S?t.value():t;return u||(u=new De),o(M,L,n,r,u)}}if(!T)return!1;return u||(u=new De),function(e,t,n,r,o,a){var u=n&i,s=Ne(e),c=s.length,l=Ne(t).length;if(c!=l&&!u)return!1;for(var f=c;f--;){var p=s[f];if(!(u?p in t:Y.call(t,p)))return!1}var h=a.get(e);if(h&&a.get(t))return h==t;var d=!0;a.set(e,t),a.set(t,e);for(var y=u;++f<c;){p=s[f];var g=e[p],v=t[p];if(r)var b=u?r(v,g,p,t,e,a):r(g,v,p,e,t,a);if(!(void 0===b?g===v||o(g,v,n,r,a):b)){d=!1;break}y||(y="constructor"==p)}if(d&&!y){var m=e.constructor,w=t.constructor;m!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof m&&m instanceof m&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(e),a.delete(t),d}(e,t,n,r,o,u)}(e,t,n,r,Le,o))}function Fe(e){return!(!qe(e)||(t=e,X&&X in t))&&(Ge(e)?ee:T).test(Ue(e));var t}function Ee(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||$,t!==r)return ce(e);var t,n,r,o=[];for(var i in Object(e))Y.call(e,i)&&"constructor"!=i&&o.push(i);return o}function ke(e,t,n,r,o,u){var s=n&i,c=e.length,l=t.length;if(c!=l&&!(s&&l>c))return!1;var f=u.get(e);if(f&&u.get(t))return f==t;var p=-1,h=!0,d=n&a?new Pe:void 0;for(u.set(e,t),u.set(t,e);++p<c;){var y=e[p],g=t[p];if(r)var v=s?r(g,y,p,t,e,u):r(y,g,p,e,t,u);if(void 0!==v){if(v)continue;h=!1;break}if(d){if(!z(t,function(e,t){if(i=t,!d.has(i)&&(y===e||o(y,e,n,r,u)))return d.push(t);var i})){h=!1;break}}else if(y!==g&&!o(y,g,n,r,u)){h=!1;break}}return u.delete(e),u.delete(t),h}function Ne(e){return function(e,t,n){var r=t(e);return He(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Xe,Ve)}function Be(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function xe(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Fe(n)?n:void 0}Ce.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},Ce.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Ce.prototype.get=function(e){var t=this.__data__;if(ye){var n=t[e];return n===o?void 0:n}return Y.call(t,e)?t[e]:void 0},Ce.prototype.has=function(e){var t=this.__data__;return ye?void 0!==t[e]:Y.call(t,e)},Ce.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ye&&void 0===t?o:t,this},_e.prototype.clear=function(){this.__data__=[],this.size=0},_e.prototype.delete=function(e){var t=this.__data__,n=Ae(t,e);return!(n<0||(n==t.length-1?t.pop():ie.call(t,n,1),--this.size,0))},_e.prototype.get=function(e){var t=this.__data__,n=Ae(t,e);return n<0?void 0:t[n][1]},_e.prototype.has=function(e){return Ae(this.__data__,e)>-1},_e.prototype.set=function(e,t){var n=this.__data__,r=Ae(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Ie.prototype.clear=function(){this.size=0,this.__data__={hash:new Ce,map:new(fe||_e),string:new Ce}},Ie.prototype.delete=function(e){var t=Be(this,e).delete(e);return this.size-=t?1:0,t},Ie.prototype.get=function(e){return Be(this,e).get(e)},Ie.prototype.has=function(e){return Be(this,e).has(e)},Ie.prototype.set=function(e,t){var n=Be(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Pe.prototype.add=Pe.prototype.push=function(e){return this.__data__.set(e,o),this},Pe.prototype.has=function(e){return this.__data__.has(e)},De.prototype.clear=function(){this.__data__=new _e,this.size=0},De.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},De.prototype.get=function(e){return this.__data__.get(e)},De.prototype.has=function(e){return this.__data__.has(e)},De.prototype.set=function(e,t){var n=this.__data__;if(n instanceof _e){var o=n.__data__;if(!fe||o.length<r-1)return o.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ie(o)}return n.set(e,t),this.size=n.size,this};var Ve=ue?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}(ue(e),function(t){return oe.call(e,t)}))}:function(){return[]},ze=Se;function Re(e,t){return!!(t=null==t?u:t)&&("number"==typeof e||A.test(e))&&e>-1&&e%1==0&&e<t}function Ue(e){if(null!=e){try{return Q.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ke(e,t){return e===t||e!=e&&t!=t}(le&&ze(new le(new ArrayBuffer(1)))!=D||fe&&ze(new fe)!=g||pe&&"[object Promise]"!=ze(pe.resolve())||he&&ze(new he)!=j||de&&"[object WeakMap]"!=ze(new de))&&(ze=function(e){var t=Se(e),n=t==m?e.constructor:void 0,r=n?Ue(n):"";if(r)switch(r){case ge:return D;case ve:return g;case be:return"[object Promise]";case me:return j;case we:return"[object WeakMap]"}return t});var We=Me(function(){return arguments}())?Me:function(e){return Qe(e)&&Y.call(e,"callee")&&!oe.call(e,"callee")},He=Array.isArray;var Je=se||function(){return!1};function Ge(e){if(!qe(e))return!1;var t=Se(e);return t==d||t==y||t==l||t==w}function $e(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=u}function qe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Qe(e){return null!=e&&"object"==typeof e}var Ye=V?function(e){return function(t){return e(t)}}(V):function(e){return Qe(e)&&$e(e.length)&&!!S[Se(e)]};function Xe(e){return null!=(t=e)&&$e(t.length)&&!Ge(t)?Te(e):Ee(e);var t}n.exports=function(e,t){return Le(e,t)}}).call(this,n(9),n(10)(e))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r,o,i,a=function(){var e=function(e,t){var n=e,r=s[t],o=null,i=0,a=null,u=[],c={},l=function(e,t){o=function(e){for(var t=new Array(e),n=0;n<e;n+=1){t[n]=new Array(e);for(var r=0;r<e;r+=1)t[n][r]=null}return t}(i=4*n+17),f(0,0),f(i-7,0),f(0,i-7),h(),p(),y(e,t),n>=7&&d(e),null==a&&(a=b(n,r,u)),g(a,t)},f=function(e,t){for(var n=-1;n<=7;n+=1)if(!(e+n<=-1||i<=e+n))for(var r=-1;r<=7;r+=1)t+r<=-1||i<=t+r||(o[e+n][t+r]=0<=n&&n<=6&&(0==r||6==r)||0<=r&&r<=6&&(0==n||6==n)||2<=n&&n<=4&&2<=r&&r<=4)},p=function(){for(var e=8;e<i-8;e+=1)null==o[e][6]&&(o[e][6]=e%2==0);for(var t=8;t<i-8;t+=1)null==o[6][t]&&(o[6][t]=t%2==0)},h=function(){for(var e=v.getPatternPosition(n),t=0;t<e.length;t+=1)for(var r=0;r<e.length;r+=1){var i=e[t],a=e[r];if(null==o[i][a])for(var u=-2;u<=2;u+=1)for(var s=-2;s<=2;s+=1)o[i+u][a+s]=-2==u||2==u||-2==s||2==s||0==u&&0==s}},d=function(e){for(var t=v.getBCHTypeNumber(n),r=0;r<18;r+=1){var a=!e&&1==(t>>r&1);o[Math.floor(r/3)][r%3+i-8-3]=a}for(r=0;r<18;r+=1){a=!e&&1==(t>>r&1);o[r%3+i-8-3][Math.floor(r/3)]=a}},y=function(e,t){for(var n=r<<3|t,a=v.getBCHTypeInfo(n),u=0;u<15;u+=1){var s=!e&&1==(a>>u&1);u<6?o[u][8]=s:u<8?o[u+1][8]=s:o[i-15+u][8]=s}for(u=0;u<15;u+=1){s=!e&&1==(a>>u&1);u<8?o[8][i-u-1]=s:u<9?o[8][15-u-1+1]=s:o[8][15-u-1]=s}o[i-8][8]=!e},g=function(e,t){for(var n=-1,r=i-1,a=7,u=0,s=v.getMaskFunction(t),c=i-1;c>0;c-=2)for(6==c&&(c-=1);;){for(var l=0;l<2;l+=1)if(null==o[r][c-l]){var f=!1;u<e.length&&(f=1==(e[u]>>>a&1)),s(r,c-l)&&(f=!f),o[r][c-l]=f,-1==(a-=1)&&(u+=1,a=7)}if((r+=n)<0||i<=r){r-=n,n=-n;break}}},b=function(e,t,n){for(var r=w.getRSBlocks(e,t),o=O(),i=0;i<n.length;i+=1){var a=n[i];o.put(a.getMode(),4),o.put(a.getLength(),v.getLengthInBits(a.getMode(),e)),a.write(o)}var u=0;for(i=0;i<r.length;i+=1)u+=r[i].dataCount;if(o.getLengthInBits()>8*u)throw"code length overflow. ("+o.getLengthInBits()+">"+8*u+")";for(o.getLengthInBits()+4<=8*u&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(!1);for(;!(o.getLengthInBits()>=8*u||(o.put(236,8),o.getLengthInBits()>=8*u));)o.put(17,8);return function(e,t){for(var n=0,r=0,o=0,i=new Array(t.length),a=new Array(t.length),u=0;u<t.length;u+=1){var s=t[u].dataCount,c=t[u].totalCount-s;r=Math.max(r,s),o=Math.max(o,c),i[u]=new Array(s);for(var l=0;l<i[u].length;l+=1)i[u][l]=255&e.getBuffer()[l+n];n+=s;var f=v.getErrorCorrectPolynomial(c),p=m(i[u],f.getLength()-1).mod(f);for(a[u]=new Array(f.getLength()-1),l=0;l<a[u].length;l+=1){var h=l+p.getLength()-a[u].length;a[u][l]=h>=0?p.getAt(h):0}}var d=0;for(l=0;l<t.length;l+=1)d+=t[l].totalCount;var y=new Array(d),g=0;for(l=0;l<r;l+=1)for(u=0;u<t.length;u+=1)l<i[u].length&&(y[g]=i[u][l],g+=1);for(l=0;l<o;l+=1)for(u=0;u<t.length;u+=1)l<a[u].length&&(y[g]=a[u][l],g+=1);return y}(o,r)};c.addData=function(e,t){var n=null;switch(t=t||"Byte"){case"Numeric":n=j(e);break;case"Alphanumeric":n=C(e);break;case"Byte":n=_(e);break;case"Kanji":n=I(e);break;default:throw"mode:"+t}u.push(n),a=null},c.isDark=function(e,t){if(e<0||i<=e||t<0||i<=t)throw e+","+t;return o[e][t]},c.getModuleCount=function(){return i},c.make=function(){if(n<1){for(var e=1;e<40;e++){for(var t=w.getRSBlocks(e,r),o=O(),i=0;i<u.length;i++){var a=u[i];o.put(a.getMode(),4),o.put(a.getLength(),v.getLengthInBits(a.getMode(),e)),a.write(o)}var s=0;for(i=0;i<t.length;i++)s+=t[i].dataCount;if(o.getLengthInBits()<=8*s)break}n=e}l(!1,function(){for(var e=0,t=0,n=0;n<8;n+=1){l(!0,n);var r=v.getLostPoint(c);(0==n||e>r)&&(e=r,t=n)}return t}())},c.createTableTag=function(e,t){e=e||2;var n="";n+='<table style="',n+=" border-width: 0px; border-style: none;",n+=" border-collapse: collapse;",n+=" padding: 0px; margin: "+(t=void 0===t?4*e:t)+"px;",n+='">',n+="<tbody>";for(var r=0;r<c.getModuleCount();r+=1){n+="<tr>";for(var o=0;o<c.getModuleCount();o+=1)n+='<td style="',n+=" border-width: 0px; border-style: none;",n+=" border-collapse: collapse;",n+=" padding: 0px; margin: 0px;",n+=" width: "+e+"px;",n+=" height: "+e+"px;",n+=" background-color: ",n+=c.isDark(r,o)?"#000000":"#ffffff",n+=";",n+='"/>';n+="</tr>"}return n+="</tbody>",n+="</table>"},c.createSvgTag=function(e,t){var n={};"object"==typeof arguments[0]&&(e=(n=arguments[0]).cellSize,t=n.margin),e=e||2,t=void 0===t?4*e:t;var r,o,i,a,u=c.getModuleCount()*e+2*t,s="";for(a="l"+e+",0 0,"+e+" -"+e+",0 0,-"+e+"z ",s+='<svg version="1.1" xmlns="http://www.w3.org/2000/svg"',s+=n.scalable?"":' width="'+u+'px" height="'+u+'px"',s+=' viewBox="0 0 '+u+" "+u+'" ',s+=' preserveAspectRatio="xMinYMin meet">',s+='<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>',s+='<path d="',o=0;o<c.getModuleCount();o+=1)for(i=o*e+t,r=0;r<c.getModuleCount();r+=1)c.isDark(o,r)&&(s+="M"+(r*e+t)+","+i+a);return s+='" stroke="transparent" fill="black"/>',s+="</svg>"},c.createDataURL=function(e,t){e=e||2,t=void 0===t?4*e:t;var n=c.getModuleCount()*e+2*t,r=t,o=n-t;return T(n,n,function(t,n){if(r<=t&&t<o&&r<=n&&n<o){var i=Math.floor((t-r)/e),a=Math.floor((n-r)/e);return c.isDark(a,i)?0:1}return 1})},c.createImgTag=function(e,t,n){e=e||2,t=void 0===t?4*e:t;var r=c.getModuleCount()*e+2*t,o="";return o+="<img",o+=' src="',o+=c.createDataURL(e,t),o+='"',o+=' width="',o+=r,o+='"',o+=' height="',o+=r,o+='"',n&&(o+=' alt="',o+=n,o+='"'),o+="/>"};return c.createASCII=function(e,t){if((e=e||1)<2)return function(e){e=void 0===e?2:e;var t,n,r,o,i,a=1*c.getModuleCount()+2*e,u=e,s=a-e,l={"██":"█","█ ":"▀"," █":"▄","  ":" "},f={"██":"▀","█ ":"▀"," █":" ","  ":" "},p="";for(t=0;t<a;t+=2){for(r=Math.floor((t-u)/1),o=Math.floor((t+1-u)/1),n=0;n<a;n+=1)i="█",u<=n&&n<s&&u<=t&&t<s&&c.isDark(r,Math.floor((n-u)/1))&&(i=" "),u<=n&&n<s&&u<=t+1&&t+1<s&&c.isDark(o,Math.floor((n-u)/1))?i+=" ":i+="█",p+=e<1&&t+1>=s?f[i]:l[i];p+="\n"}return a%2&&e>0?p.substring(0,p.length-a-1)+Array(a+1).join("▀"):p.substring(0,p.length-1)}(t);e-=1,t=void 0===t?2*e:t;var n,r,o,i,a=c.getModuleCount()*e+2*t,u=t,s=a-t,l=Array(e+1).join("██"),f=Array(e+1).join("  "),p="",h="";for(n=0;n<a;n+=1){for(o=Math.floor((n-u)/e),h="",r=0;r<a;r+=1)i=1,u<=r&&r<s&&u<=n&&n<s&&c.isDark(o,Math.floor((r-u)/e))&&(i=0),h+=i?l:f;for(o=0;o<e;o+=1)p+=h+"\n"}return p.substring(0,p.length-1)},c.renderTo2dContext=function(e,t){t=t||2;for(var n=c.getModuleCount(),r=0;r<n;r++)for(var o=0;o<n;o++)e.fillStyle=c.isDark(r,o)?"black":"white",e.fillRect(r*t,o*t,t,t)},c};e.stringToBytes=(e.stringToBytesFuncs={default:function(e){for(var t=[],n=0;n<e.length;n+=1){var r=e.charCodeAt(n);t.push(255&r)}return t}}).default,e.createStringToBytes=function(e,t){var n=function(){for(var n=D(e),r=function(){var e=n.read();if(-1==e)throw"eof";return e},o=0,i={};;){var a=n.read();if(-1==a)break;var u=r(),s=r()<<8|r();i[String.fromCharCode(a<<8|u)]=s,o+=1}if(o!=t)throw o+" != "+t;return i}(),r="?".charCodeAt(0);return function(e){for(var t=[],o=0;o<e.length;o+=1){var i=e.charCodeAt(o);if(i<128)t.push(i);else{var a=n[e.charAt(o)];"number"==typeof a?(255&a)==a?t.push(a):(t.push(a>>>8),t.push(255&a)):t.push(r)}}return t}};var t,n,r,o=1,i=2,a=4,u=8,s={L:1,M:0,Q:3,H:2},c=0,l=1,f=2,p=3,h=4,d=5,y=6,g=7,v=(t=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],r=function(e){for(var t=0;0!=e;)t+=1,e>>>=1;return t},(n={}).getBCHTypeInfo=function(e){for(var t=e<<10;r(t)-r(1335)>=0;)t^=1335<<r(t)-r(1335);return 21522^(e<<10|t)},n.getBCHTypeNumber=function(e){for(var t=e<<12;r(t)-r(7973)>=0;)t^=7973<<r(t)-r(7973);return e<<12|t},n.getPatternPosition=function(e){return t[e-1]},n.getMaskFunction=function(e){switch(e){case c:return function(e,t){return(e+t)%2==0};case l:return function(e,t){return e%2==0};case f:return function(e,t){return t%3==0};case p:return function(e,t){return(e+t)%3==0};case h:return function(e,t){return(Math.floor(e/2)+Math.floor(t/3))%2==0};case d:return function(e,t){return e*t%2+e*t%3==0};case y:return function(e,t){return(e*t%2+e*t%3)%2==0};case g:return function(e,t){return(e*t%3+(e+t)%2)%2==0};default:throw"bad maskPattern:"+e}},n.getErrorCorrectPolynomial=function(e){for(var t=m([1],0),n=0;n<e;n+=1)t=t.multiply(m([1,b.gexp(n)],0));return t},n.getLengthInBits=function(e,t){if(1<=t&&t<10)switch(e){case o:return 10;case i:return 9;case a:case u:return 8;default:throw"mode:"+e}else if(t<27)switch(e){case o:return 12;case i:return 11;case a:return 16;case u:return 10;default:throw"mode:"+e}else{if(!(t<41))throw"type:"+t;switch(e){case o:return 14;case i:return 13;case a:return 16;case u:return 12;default:throw"mode:"+e}}},n.getLostPoint=function(e){for(var t=e.getModuleCount(),n=0,r=0;r<t;r+=1)for(var o=0;o<t;o+=1){for(var i=0,a=e.isDark(r,o),u=-1;u<=1;u+=1)if(!(r+u<0||t<=r+u))for(var s=-1;s<=1;s+=1)o+s<0||t<=o+s||0==u&&0==s||a==e.isDark(r+u,o+s)&&(i+=1);i>5&&(n+=3+i-5)}for(r=0;r<t-1;r+=1)for(o=0;o<t-1;o+=1){var c=0;e.isDark(r,o)&&(c+=1),e.isDark(r+1,o)&&(c+=1),e.isDark(r,o+1)&&(c+=1),e.isDark(r+1,o+1)&&(c+=1),0!=c&&4!=c||(n+=3)}for(r=0;r<t;r+=1)for(o=0;o<t-6;o+=1)e.isDark(r,o)&&!e.isDark(r,o+1)&&e.isDark(r,o+2)&&e.isDark(r,o+3)&&e.isDark(r,o+4)&&!e.isDark(r,o+5)&&e.isDark(r,o+6)&&(n+=40);for(o=0;o<t;o+=1)for(r=0;r<t-6;r+=1)e.isDark(r,o)&&!e.isDark(r+1,o)&&e.isDark(r+2,o)&&e.isDark(r+3,o)&&e.isDark(r+4,o)&&!e.isDark(r+5,o)&&e.isDark(r+6,o)&&(n+=40);var l=0;for(o=0;o<t;o+=1)for(r=0;r<t;r+=1)e.isDark(r,o)&&(l+=1);return n+=Math.abs(100*l/t/t-50)/5*10},n),b=function(){for(var e=new Array(256),t=new Array(256),n=0;n<8;n+=1)e[n]=1<<n;for(n=8;n<256;n+=1)e[n]=e[n-4]^e[n-5]^e[n-6]^e[n-8];for(n=0;n<255;n+=1)t[e[n]]=n;var r={glog:function(e){if(e<1)throw"glog("+e+")";return t[e]},gexp:function(t){for(;t<0;)t+=255;for(;t>=256;)t-=255;return e[t]}};return r}();function m(e,t){if(void 0===e.length)throw e.length+"/"+t;var n=function(){for(var n=0;n<e.length&&0==e[n];)n+=1;for(var r=new Array(e.length-n+t),o=0;o<e.length-n;o+=1)r[o]=e[o+n];return r}(),r={getAt:function(e){return n[e]},getLength:function(){return n.length},multiply:function(e){for(var t=new Array(r.getLength()+e.getLength()-1),n=0;n<r.getLength();n+=1)for(var o=0;o<e.getLength();o+=1)t[n+o]^=b.gexp(b.glog(r.getAt(n))+b.glog(e.getAt(o)));return m(t,0)},mod:function(e){if(r.getLength()-e.getLength()<0)return r;for(var t=b.glog(r.getAt(0))-b.glog(e.getAt(0)),n=new Array(r.getLength()),o=0;o<r.getLength();o+=1)n[o]=r.getAt(o);for(o=0;o<e.getLength();o+=1)n[o]^=b.gexp(b.glog(e.getAt(o))+t);return m(n,0).mod(e)}};return r}var w=function(){var e=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],t=function(e,t){var n={};return n.totalCount=e,n.dataCount=t,n},n={};return n.getRSBlocks=function(n,r){var o=function(t,n){switch(n){case s.L:return e[4*(t-1)+0];case s.M:return e[4*(t-1)+1];case s.Q:return e[4*(t-1)+2];case s.H:return e[4*(t-1)+3];default:return}}(n,r);if(void 0===o)throw"bad rs block @ typeNumber:"+n+"/errorCorrectionLevel:"+r;for(var i=o.length/3,a=[],u=0;u<i;u+=1)for(var c=o[3*u+0],l=o[3*u+1],f=o[3*u+2],p=0;p<c;p+=1)a.push(t(l,f));return a},n}(),O=function(){var e=[],t=0,n={getBuffer:function(){return e},getAt:function(t){var n=Math.floor(t/8);return 1==(e[n]>>>7-t%8&1)},put:function(e,t){for(var r=0;r<t;r+=1)n.putBit(1==(e>>>t-r-1&1))},getLengthInBits:function(){return t},putBit:function(n){var r=Math.floor(t/8);e.length<=r&&e.push(0),n&&(e[r]|=128>>>t%8),t+=1}};return n},j=function(e){var t=o,n=e,r={getMode:function(){return t},getLength:function(e){return n.length},write:function(e){for(var t=n,r=0;r+2<t.length;)e.put(i(t.substring(r,r+3)),10),r+=3;r<t.length&&(t.length-r==1?e.put(i(t.substring(r,r+1)),4):t.length-r==2&&e.put(i(t.substring(r,r+2)),7))}},i=function(e){for(var t=0,n=0;n<e.length;n+=1)t=10*t+a(e.charAt(n));return t},a=function(e){if("0"<=e&&e<="9")return e.charCodeAt(0)-"0".charCodeAt(0);throw"illegal char :"+e};return r},C=function(e){var t=i,n=e,r={getMode:function(){return t},getLength:function(e){return n.length},write:function(e){for(var t=n,r=0;r+1<t.length;)e.put(45*o(t.charAt(r))+o(t.charAt(r+1)),11),r+=2;r<t.length&&e.put(o(t.charAt(r)),6)}},o=function(e){if("0"<=e&&e<="9")return e.charCodeAt(0)-"0".charCodeAt(0);if("A"<=e&&e<="Z")return e.charCodeAt(0)-"A".charCodeAt(0)+10;switch(e){case" ":return 36;case"$":return 37;case"%":return 38;case"*":return 39;case"+":return 40;case"-":return 41;case".":return 42;case"/":return 43;case":":return 44;default:throw"illegal char :"+e}};return r},_=function(t){var n=a,r=e.stringToBytes(t),o={getMode:function(){return n},getLength:function(e){return r.length},write:function(e){for(var t=0;t<r.length;t+=1)e.put(r[t],8)}};return o},I=function(t){var n=u,r=e.stringToBytesFuncs.SJIS;if(!r)throw"sjis not supported.";!function(e,t){var n=r("友");if(2!=n.length||38726!=(n[0]<<8|n[1]))throw"sjis not supported."}();var o=r(t),i={getMode:function(){return n},getLength:function(e){return~~(o.length/2)},write:function(e){for(var t=o,n=0;n+1<t.length;){var r=(255&t[n])<<8|255&t[n+1];if(33088<=r&&r<=40956)r-=33088;else{if(!(57408<=r&&r<=60351))throw"illegal char at "+(n+1)+"/"+r;r-=49472}r=192*(r>>>8&255)+(255&r),e.put(r,13),n+=2}if(n<t.length)throw"illegal char at "+(n+1)}};return i},P=function(){var e=[],t={writeByte:function(t){e.push(255&t)},writeShort:function(e){t.writeByte(e),t.writeByte(e>>>8)},writeBytes:function(e,n,r){n=n||0,r=r||e.length;for(var o=0;o<r;o+=1)t.writeByte(e[o+n])},writeString:function(e){for(var n=0;n<e.length;n+=1)t.writeByte(e.charCodeAt(n))},toByteArray:function(){return e},toString:function(){var t="";t+="[";for(var n=0;n<e.length;n+=1)n>0&&(t+=","),t+=e[n];return t+="]"}};return t},D=function(e){var t=e,n=0,r=0,o=0,i={read:function(){for(;o<8;){if(n>=t.length){if(0==o)return-1;throw"unexpected end of file./"+o}var e=t.charAt(n);if(n+=1,"="==e)return o=0,-1;e.match(/^\s$/)||(r=r<<6|a(e.charCodeAt(0)),o+=6)}var i=r>>>o-8&255;return o-=8,i}},a=function(e){if(65<=e&&e<=90)return e-65;if(97<=e&&e<=122)return e-97+26;if(48<=e&&e<=57)return e-48+52;if(43==e)return 62;if(47==e)return 63;throw"c:"+e};return i},T=function(e,t,n){for(var r=function(e,t){var n=e,r=t,o=new Array(e*t),i={setPixel:function(e,t,r){o[t*n+e]=r},write:function(e){e.writeString("GIF87a"),e.writeShort(n),e.writeShort(r),e.writeByte(128),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(0),e.writeByte(255),e.writeByte(255),e.writeByte(255),e.writeString(","),e.writeShort(0),e.writeShort(0),e.writeShort(n),e.writeShort(r),e.writeByte(0);var t=a(2);e.writeByte(2);for(var o=0;t.length-o>255;)e.writeByte(255),e.writeBytes(t,o,255),o+=255;e.writeByte(t.length-o),e.writeBytes(t,o,t.length-o),e.writeByte(0),e.writeString(";")}},a=function(e){for(var t=1<<e,n=1+(1<<e),r=e+1,i=u(),a=0;a<t;a+=1)i.add(String.fromCharCode(a));i.add(String.fromCharCode(t)),i.add(String.fromCharCode(n));var s,c,l,f=P(),p=(s=f,c=0,l=0,{write:function(e,t){if(e>>>t!=0)throw"length over";for(;c+t>=8;)s.writeByte(255&(e<<c|l)),t-=8-c,e>>>=8-c,l=0,c=0;l|=e<<c,c+=t},flush:function(){c>0&&s.writeByte(l)}});p.write(t,r);var h=0,d=String.fromCharCode(o[h]);for(h+=1;h<o.length;){var y=String.fromCharCode(o[h]);h+=1,i.contains(d+y)?d+=y:(p.write(i.indexOf(d),r),i.size()<4095&&(i.size()==1<<r&&(r+=1),i.add(d+y)),d=y)}return p.write(i.indexOf(d),r),p.write(n,r),p.flush(),f.toByteArray()},u=function(){var e={},t=0,n={add:function(r){if(n.contains(r))throw"dup key:"+r;e[r]=t,t+=1},size:function(){return t},indexOf:function(t){return e[t]},contains:function(t){return void 0!==e[t]}};return n};return i}(e,t),o=0;o<t;o+=1)for(var i=0;i<e;i+=1)r.setPixel(i,o,n(i,o));var a=P();r.write(a);for(var u,s,c,l,f,p,h,d=(u=0,s=0,c=0,l="",p=function(e){l+=String.fromCharCode(h(63&e))},h=function(e){if(e<0);else{if(e<26)return 65+e;if(e<52)return e-26+97;if(e<62)return e-52+48;if(62==e)return 43;if(63==e)return 47}throw"n:"+e},(f={}).writeByte=function(e){for(u=u<<8|255&e,s+=8,c+=1;s>=6;)p(u>>>s-6),s-=6},f.flush=function(){if(s>0&&(p(u<<6-s),u=0,s=0),c%3!=0)for(var e=3-c%3,t=0;t<e;t+=1)l+="="},f.toString=function(){return l},f),y=a.toByteArray(),g=0;g<y.length;g+=1)d.writeByte(y[g]);return d.flush(),"data:image/gif;base64,"+d};return e}();a.stringToBytesFuncs["UTF-8"]=function(e){return function(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t.push(r):r<2048?t.push(192|r>>6,128|63&r):r<55296||r>=57344?t.push(224|r>>12,128|r>>6&63,128|63&r):(n++,r=65536+((1023&r)<<10|1023&e.charCodeAt(n)),t.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r))}return t}(e)},o=[],void 0===(i="function"==typeof(r=function(){return a})?r.apply(t,o):r)||(e.exports=i)},function(e,t){e.exports=ReactDOM},function(e,t,n){},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,u)}s((r=r.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=function(e){function t(t){return e.call(this,t)||this}return o(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){return a(this,function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadValues()];case 2:return t.sent(),[2]}})})},t}(n(15).FlowBaseComponent);t.FlowComponent=u},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,u)}s((r=r.apply(e,t||[])).next())})},a=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=n(1),s=n(4),c=n(16),l=n(2),f=n(0),p=n(3),h=n(18);manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.beforeSend=function(e,t){for(var n=0,r=manywho.eventManager.beforeSendListeners;n<r.length;n++){var o=r[n];manywho.eventManager.beforeSendListeners[o](e,t)}},manywho.eventManager.done=function(e,t){for(var n=0,r=manywho.eventManager.doneListeners;n<r.length;n++){var o=r[n];manywho.eventManager.doneListeners[o](e,t)}},manywho.eventManager.fail=function(e,t){for(var n=0,r=manywho.eventManager.failListeners;n<r.length;n++){var o=r[n];manywho.eventManager.failListeners[o](e,t)}},manywho.eventManager.addBeforeSendListener=function(e){manywho.eventManager.beforeSendListeners.push(e)},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e){manywho.eventManager.failListeners.push(e)},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}));var d=function(e){function t(t){var n=e.call(this,t)||this;n.IsLoading=!0,n.Fields={},n.LoadingState="initial",n.loadValues=n.loadValues.bind(n),n.dontLoadValues=n.dontLoadValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var r=manywho.settings.global("platform.uri")||"https://flow.manywho.com";return n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.url=r+"/api/run/1/state/"+n.StateId+"/values",n.userurl=r+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n}return o(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoading",{get:function(){return this.IsLoading},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){var e,t,n,r;return a(this,function(o){switch(e=manywho.model.getComponent(this.ComponentId,this.FlowKey),t=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":case"ContentList":n=void 0,t.objectData&&(n=t.objectData,n=JSON.parse(JSON.stringify(n))),r={objectData:n},manywho.state.setComponent(this.componentId,r,this.flowKey,!0);break;default:t.contentValue=e.contentValue}return manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]})})},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,function(){return a(this,function(e){return[2,Promise.resolve()]})})},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var r=n[t];this.Outcomes[r.developerName]=new h.FlowOutcome(r)}for(var o=0,i=e=manywho.model.getOutcomes(null,this.props.flowKey);o<i.length;o++){r=i[o];this.Outcomes[r.developerName]=new h.FlowOutcome(r)}},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).attributes;if(e)for(var t=0,n=Object.keys(e);t<n.length;t++){var r=n[t];this.Attributes[r]=new s.FlowAttribute(r,e[r])}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,dataSource:new p.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,r=t;n<r.length;n++){var o=r[n];this.Model.dataSource.addItem(new f.FlowObjectData([o]))}var i=e.columns;if(i)for(var a=0,u=i;a<u.length;a++){var s=u[a];this.Model.displayColumns.push(new c.FlowDisplayColumn(s))}}},t.prototype.loadValues=function(){return i(this,void 0,void 0,function(){var e,t,n,r=this;return a(this,function(o){switch(o.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.Fields={},[4,manywho.connection.request(this,null,this.url,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return(o.sent()||[]).map(function(e){r.Fields[e.developerName]=new l.FlowField(e)}),[4,manywho.connection.request(this,null,this.userurl,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 2:return e=o.sent(),t=new l.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value},this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]}})})},t.prototype.dontLoadValues=function(){return i(this,void 0,void 0,function(){return a(this,function(e){return this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]})})},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new f.FlowObjectData(e.objectData[0]);case"ContentList":return new p.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.getStateValueType=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new f.FlowObjectData(e.objectData[0]);case"ContentList":return new p.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.setStateValue=function(e){return i(this,void 0,void 0,function(){var t,n,r,o,i;return a(this,function(a){switch(t=manywho.model.getComponent(this.ComponentId,this.FlowKey),n=manywho.state.getComponent(this.componentId,this.flowKey)||{},t.contentType){case"ContentObject":o=e.iFlowObjectDataArray(),o=JSON.parse(JSON.stringify(o)),r={objectData:o},manywho.state.setComponent(this.componentId,r,this.flowKey,!0);break;case"ContentList":e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(o)),r={objectDataArray:i},manywho.state.setComponent(this.componentId,r,this.flowKey,!0);break;case"ContentDate":n.contentValue=e.toISOString();break;default:n.contentValue=e}return[2]})})},t.prototype.updateValues=function(e){return i(this,void 0,void 0,function(){var t,n,r,o;return a(this,function(i){switch(i.label){case 0:for(this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t=[],n=0,r=e;n<r.length;n++)o=r[n],t.push(o.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),t)];case 1:return i.sent(),[2]}})})},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,function(){var n;return a(this,function(r){switch(r.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t||(t=null),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return r.sent(),[3,3];case 2:this.log("Could not find outcome "+e),r.label=3;case 3:return[2]}})})},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,r){return i(this,void 0,void 0,function(){var e,n,o;return a(this,function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(o={}).id=t,o.developerName=null,o.inputs=r?r.iFlowObjectDataArray():null,manywho.connection.request(this,null,n,"POST",this.TenantId,null,manywho.state.getAuthenticationToken(this.FlowKey),o),[2]})})},t.prototype.launchFlowTab=function(e,t,n,r){return i(this,void 0,void 0,function(){var r,o;return a(this,function(i){return r=manywho.settings.global("platform.uri")||"https://flow.boomi.com",o=r+"/"+e+"/play/"+n+"?flow-id="+t,window.open(o,"_new"),[2]})})},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,function(){var t;return a(this,function(n){switch(n.label){case 0:if(!e.data.data)return[3,5];if(!(t=JSON.parse(e.data.data)).action)return[3,5];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1]}return[3,3];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,5];case 3:return[4,this.handleMessage(t)];case 4:return n.sent(),[3,5];case 5:return[2]}})})},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,function(){return a(this,function(e){return[2]})})},t}(u.Component);t.FlowBaseComponent=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=e.contentType,this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!0,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),o=n(0),i=n(3),a=function(){function e(e){switch(this.DeveloperName=e.developerName,this.ContentType=r.eContentType[e.contentType],this.ContentFormat=e.contentFormat,this.TypeElementId=e.typeElementId,this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case r.eContentType.ContentObject:this.Value=e.objectData?new o.FlowObjectData(e.objectData):null;break;case r.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue}}return e.newInstance=function(e,t,n){var o,i=[];switch(t){case r.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case r.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:o=n}return new this({contentFormat:null,contentType:r.eContentType[t],contentValue:o,developerName:e,objectData:i,typeElementId:null,typeElementPropertyId:null})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case r.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case r.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowObjectDataProperty=function(){var e,t=[];switch(this.ContentType){case r.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case r.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:r.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var o=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var o=n[t];this.Attributes[o]=new r.FlowAttribute(o,e.attributes[o])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,