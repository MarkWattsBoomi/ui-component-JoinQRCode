!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(16),o=function(){function t(t){if(this.ExternalId=null,this.IsSelected=!1,this.Order=0,this.Properties={},t&&t[0]){var e=t[0];this.DeveloperName=e.developerName,this.InternalId=e.internalId,this.ExternalId=e.externalId,this.Order=e.order,this.IsSelected=e.isSelected;for(var r=0,o=e.properties;r<o.length;r++){var i=o[r];this.Properties[i.developerName]=new n.FlowObjectDataProperty(i)}}}return Object.defineProperty(t.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(t){this.DeveloperName=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"externalId",{get:function(){return this.ExternalId},set:function(t){this.ExternalId=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"internalId",{get:function(){return this.InternalId},set:function(t){this.InternalId=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(t){this.IsSelected=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"order",{get:function(){return this.Order},set:function(t){this.Order=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),t.newInstance=function(t){return new this([{developerName:t,externalId:null,internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[]}])},t.prototype.addProperty=function(t){this.Properties[t.developerName]=t},t.prototype.removeProperty=function(t){delete this.Properties[t]},t.prototype.iObjectData=function(){for(var t=[],e=0,r=Object.keys(this.properties);e<r.length;e++){var n=r[e];t.push(this.properties[n].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:t}},t.prototype.iFlowObjectDataArray=function(){var t=[];return t.push(this.iObjectData()),t},t}();e.FlowObjectData=o},function(t,e){t.exports=React},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(0);!function(t){t[t.ascending=0]="ascending",t[t.descending=1]="descending"}(n=e.eSortOrder||(e.eSortOrder={}));var i=function(){function t(t){this.Items=[];for(var e=0,r=t||[];e<r.length;e++){var n=r[e];this.Items.push(new o.FlowObjectData([n]))}}return Object.defineProperty(t.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),t.prototype.sort=function(t,e){return void 0===t&&(t=n.ascending),t===n.ascending?e?this.Items.sort(function(t,r){switch(!0){case t.properties[e].value<r.properties[e].value:return-1;case t.properties[e].value>r.properties[e].value:return 1;default:return 0}}):this.Items.sort(function(t,e){return t.order-e.order}):e?this.Items.sort(function(t,r){switch(!0){case t.properties[e].value<r.properties[e].value:return 1;case t.properties[e].value>r.properties[e].value:return-1;default:return 0}}):this.Items.sort(function(t,e){return t.order-e.order})},t.prototype.addItem=function(t){this.Items.push(t)},t.prototype.clearItems=function(){this.Items=[]},t.prototype.iFlowObjectDataArray=function(){for(var t=[],e=0,r=this.Items;e<r.length;e++){var n=r[e];t.push(n.iObjectData())}return t},t.prototype.getItemWithPropertyName=function(t,e,r){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[t].value.toLowerCase()===e.toLowerCase())return i.properties[r]}return null},t.prototype.getItemWithPropertyValue=function(t,e){for(var r=0,n=this.Items;r<n.length;r++){var o=n[r];if(o.properties[t].value.toLowerCase()===e.toLowerCase())return o}},t}();e.FlowObjectDataArray=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.Name=t,this.Value=e}return Object.defineProperty(t.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),t}();e.FlowAttribute=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(0),i=r(2);!function(t){t[t.ContentString=0]="ContentString",t[t.ContentNumber=1]="ContentNumber",t[t.ContentObject=2]="ContentObject",t[t.ContentBoolean=3]="ContentBoolean",t[t.ContentList=4]="ContentList",t[t.ContentPassword=5]="ContentPassword",t[t.ContentContent=6]="ContentContent",t[t.ContentDateTime=7]="ContentDateTime",t[t.ContentEncrypted=8]="ContentEncrypted"}(n=e.eContentType||(e.eContentType={}));var a=function(){function t(t){switch(this.ContentType=n[t.contentType],this.DeveloperName=t.developerName,this.TypeElementDeveloperName=t.typeElementDeveloperName,this.TypeElementId=t.typeElementId,this.TypeElementPropertyDeveloperName=t.typeElementPropertyDeveloperName,this.TypeElementPropertyId=t.typeElementPropertyId,this.ValueElementId=t.valueElementId,this.ContentType){case n.ContentObject:this.Value=t.objectData&&t.objectData[0]?new o.FlowObjectData(t.objectData):null;break;case n.ContentList:this.Value=t.objectData&&t.objectData[0]?new i.FlowObjectDataArray(t.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=t.contentValue}}return Object.defineProperty(t.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.Value},set:function(t){this.Value=t},enumerable:!0,configurable:!0}),t.prototype.iFlowField=function(){var t,e=[];switch(this.ContentType){case n.ContentObject:var r=this.Value;e.push(r.iObjectData());break;case n.ContentList:e=this.Value.iFlowObjectDataArray();break;default:t=this.Value}return{contentType:n[this.ContentType],contentValue:t,developerName:this.DeveloperName,objectData:e,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},t}();e.FlowField=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(6))},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),a=r(7);r(13);var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.render=function(){var t=this.model.joinUri,e=this.model.width>0?this.model.width:200,r=this.attributes.logo&&this.attributes.logo.value||"",n=this.attributes.logoWidth?parseInt(this.attributes.logoWidth.value):50,o=this.attributes.logoHeight?parseInt(this.attributes.logoHeight.value):50,u=this.attributes.logoOpacity?parseInt(this.attributes.logoOpacity.value):50;return i.createElement(a.QRCode,{value:t,ecLevel:"M",size:e,padding:10,bgColor:"#fefefe",fgColor:"#000000",logoImage:r,logoWidth:n,logoHeight:o,logoOpacity:u})},e}(r(14).FlowComponent);manywho.component.register("JoinQRCode",u),e.default=u},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var a=r(8),u=r(11),c=r(1),s=r(12),l=function(t){function e(e){var r=t.call(this,e)||this;return r.canvas=c.createRef(),r}return o(e,t),e.utf16to8=function(t){var e,r,n="",o=t.length;for(e=0;e<o;e++)(r=t.charCodeAt(e))>=1&&r<=127?n+=t.charAt(e):r>2047?(n+=String.fromCharCode(224|r>>12&15),n+=String.fromCharCode(128|r>>6&63),n+=String.fromCharCode(128|r>>0&63)):(n+=String.fromCharCode(192|r>>6&31),n+=String.fromCharCode(128|r>>0&63));return n},e.prototype.shouldComponentUpdate=function(t){return!a(this.props,t)},e.prototype.componentDidMount=function(){this.update()},e.prototype.componentDidUpdate=function(){this.update()},e.prototype.update=function(){var t=this.props,r=t.value,n=t.ecLevel,o=t.size,i=t.bgColor,a=t.fgColor,c=t.logoImage,l=t.logoWidth,f=t.logoHeight,p=t.logoOpacity,h=u(0,n);h.addData(e.utf16to8(r)),h.make();var d=s.findDOMNode(this.canvas.current),g=d.getContext("2d"),y=o/h.getModuleCount(),v=o/h.getModuleCount(),b=window.devicePixelRatio||1;d.height=d.width=o*b,g.scale(b,b);for(var m=0;m<h.getModuleCount();m++)for(var w=0;w<h.getModuleCount();w++){g.fillStyle=h.isDark(m,w)?a:i;var j=Math.ceil((w+1)*y)-Math.floor(w*y),O=Math.ceil((m+1)*v)-Math.floor(m*v);g.fillRect(Math.round(w*y),Math.round(m*v),j,O)}if(c){var _=new Image;_.crossOrigin="Anonymous",_.onload=function(){var t=l||.2*o,e=f||t,r=(o-t)/2,n=(o-e)/2;_.width=t,_.height=e,g.save(),g.globalAlpha=p,g.drawImage(_,r,n,t,e),g.restore()},_.src=c}},e.prototype.render=function(){return c.createElement("canvas",{id:"react-qrcode-logo",height:this.props.size,width:this.props.size,style:i({height:this.props.size+"px",width:this.props.size+"px",padding:100*this.props.padding/this.props.size+"%",background:this.props.bgColor},this.props.style),ref:this.canvas})},e.defaultProps={value:"https://reactjs.org/",ecLevel:"M",size:150,padding:10,bgColor:"#FFFFFF",fgColor:"#000000",logoOpacity:1},e}(c.Component);e.QRCode=l},function(t,e,r){(function(t,r){var n=200,o="__lodash_hash_undefined__",i=1,a=2,u=9007199254740991,c="[object Arguments]",s="[object Array]",l="[object AsyncFunction]",f="[object Boolean]",p="[object Date]",h="[object Error]",d="[object Function]",g="[object GeneratorFunction]",y="[object Map]",v="[object Number]",b="[object Null]",m="[object Object]",w="[object Proxy]",j="[object RegExp]",O="[object Set]",_="[object String]",C="[object Symbol]",I="[object Undefined]",P="[object ArrayBuffer]",A="[object DataView]",D=/^\[object .+?Constructor\]$/,S=/^(?:0|[1-9]\d*)$/,T={};T["[object Float32Array]"]=T["[object Float64Array]"]=T["[object Int8Array]"]=T["[object Int16Array]"]=T["[object Int32Array]"]=T["[object Uint8Array]"]=T["[object Uint8ClampedArray]"]=T["[object Uint16Array]"]=T["[object Uint32Array]"]=!0,T[c]=T[s]=T[P]=T[f]=T[A]=T[p]=T[h]=T[d]=T[y]=T[v]=T[m]=T[j]=T[O]=T[_]=T["[object WeakMap]"]=!1;var k="object"==typeof t&&t&&t.Object===Object&&t,E="object"==typeof self&&self&&self.Object===Object&&self,M=k||E||Function("return this")(),F=e&&!e.nodeType&&e,L=F&&"object"==typeof r&&r&&!r.nodeType&&r,B=L&&L.exports===F,N=B&&k.process,x=function(){try{return N&&N.binding&&N.binding("util")}catch(t){}}(),V=x&&x.isTypedArray;function z(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function R(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function U(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}var K,G,H,W=Array.prototype,J=Function.prototype,$=Object.prototype,Q=M["__core-js_shared__"],q=J.toString,Y=$.hasOwnProperty,X=(K=/[^.]+$/.exec(Q&&Q.keys&&Q.keys.IE_PROTO||""))?"Symbol(src)_1."+K:"",Z=$.toString,tt=RegExp("^"+q.call(Y).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),et=B?M.Buffer:void 0,rt=M.Symbol,nt=M.Uint8Array,ot=$.propertyIsEnumerable,it=W.splice,at=rt?rt.toStringTag:void 0,ut=Object.getOwnPropertySymbols,ct=et?et.isBuffer:void 0,st=(G=Object.keys,H=Object,function(t){return G(H(t))}),lt=xt(M,"DataView"),ft=xt(M,"Map"),pt=xt(M,"Promise"),ht=xt(M,"Set"),dt=xt(M,"WeakMap"),gt=xt(Object,"create"),yt=Ut(lt),vt=Ut(ft),bt=Ut(pt),mt=Ut(ht),wt=Ut(dt),jt=rt?rt.prototype:void 0,Ot=jt?jt.valueOf:void 0;function _t(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Ct(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function It(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Pt(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new It;++e<r;)this.add(t[e])}function At(t){var e=this.__data__=new Ct(t);this.size=e.size}function Dt(t,e){var r=Ht(t),n=!r&&Gt(t),o=!r&&!n&&Wt(t),i=!r&&!n&&!o&&Yt(t),a=r||n||o||i,u=a?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],c=u.length;for(var s in t)!e&&!Y.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Rt(s,c))||u.push(s);return u}function St(t,e){for(var r=t.length;r--;)if(Kt(t[r][0],e))return r;return-1}function Tt(t){return null==t?void 0===t?I:b:at&&at in Object(t)?function(t){var e=Y.call(t,at),r=t[at];try{t[at]=void 0;var n=!0}catch(t){}var o=Z.call(t);n&&(e?t[at]=r:delete t[at]);return o}(t):function(t){return Z.call(t)}(t)}function kt(t){return qt(t)&&Tt(t)==c}function Et(t,e,r,n,o){return t===e||(null==t||null==e||!qt(t)&&!qt(e)?t!=t&&e!=e:function(t,e,r,n,o,u){var l=Ht(t),d=Ht(e),g=l?s:zt(t),b=d?s:zt(e),w=(g=g==c?m:g)==m,I=(b=b==c?m:b)==m,D=g==b;if(D&&Wt(t)){if(!Wt(e))return!1;l=!0,w=!1}if(D&&!w)return u||(u=new At),l||Yt(t)?Lt(t,e,r,n,o,u):function(t,e,r,n,o,u,c){switch(r){case A:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case P:return!(t.byteLength!=e.byteLength||!u(new nt(t),new nt(e)));case f:case p:case v:return Kt(+t,+e);case h:return t.name==e.name&&t.message==e.message;case j:case _:return t==e+"";case y:var s=R;case O:var l=n&i;if(s||(s=U),t.size!=e.size&&!l)return!1;var d=c.get(t);if(d)return d==e;n|=a,c.set(t,e);var g=Lt(s(t),s(e),n,o,u,c);return c.delete(t),g;case C:if(Ot)return Ot.call(t)==Ot.call(e)}return!1}(t,e,g,r,n,o,u);if(!(r&i)){var S=w&&Y.call(t,"__wrapped__"),T=I&&Y.call(e,"__wrapped__");if(S||T){var k=S?t.value():t,E=T?e.value():e;return u||(u=new At),o(k,E,r,n,u)}}if(!D)return!1;return u||(u=new At),function(t,e,r,n,o,a){var u=r&i,c=Bt(t),s=c.length,l=Bt(e).length;if(s!=l&&!u)return!1;for(var f=s;f--;){var p=c[f];if(!(u?p in e:Y.call(e,p)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var d=!0;a.set(t,e),a.set(e,t);for(var g=u;++f<s;){p=c[f];var y=t[p],v=e[p];if(n)var b=u?n(v,y,p,e,t,a):n(y,v,p,t,e,a);if(!(void 0===b?y===v||o(y,v,r,n,a):b)){d=!1;break}g||(g="constructor"==p)}if(d&&!g){var m=t.constructor,w=e.constructor;m!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,r,n,o,u)}(t,e,r,n,Et,o))}function Mt(t){return!(!Qt(t)||(e=t,X&&X in e))&&(Jt(t)?tt:D).test(Ut(t));var e}function Ft(t){if(r=(e=t)&&e.constructor,n="function"==typeof r&&r.prototype||$,e!==n)return st(t);var e,r,n,o=[];for(var i in Object(t))Y.call(t,i)&&"constructor"!=i&&o.push(i);return o}function Lt(t,e,r,n,o,u){var c=r&i,s=t.length,l=e.length;if(s!=l&&!(c&&l>s))return!1;var f=u.get(t);if(f&&u.get(e))return f==e;var p=-1,h=!0,d=r&a?new Pt:void 0;for(u.set(t,e),u.set(e,t);++p<s;){var g=t[p],y=e[p];if(n)var v=c?n(y,g,p,e,t,u):n(g,y,p,t,e,u);if(void 0!==v){if(v)continue;h=!1;break}if(d){if(!z(e,function(t,e){if(i=e,!d.has(i)&&(g===t||o(g,t,r,n,u)))return d.push(e);var i})){h=!1;break}}else if(g!==y&&!o(g,y,r,n,u)){h=!1;break}}return u.delete(t),u.delete(e),h}function Bt(t){return function(t,e,r){var n=e(t);return Ht(t)?n:function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}(n,r(t))}(t,Xt,Vt)}function Nt(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map}function xt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return Mt(r)?r:void 0}_t.prototype.clear=function(){this.__data__=gt?gt(null):{},this.size=0},_t.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},_t.prototype.get=function(t){var e=this.__data__;if(gt){var r=e[t];return r===o?void 0:r}return Y.call(e,t)?e[t]:void 0},_t.prototype.has=function(t){var e=this.__data__;return gt?void 0!==e[t]:Y.call(e,t)},_t.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=gt&&void 0===e?o:e,this},Ct.prototype.clear=function(){this.__data__=[],this.size=0},Ct.prototype.delete=function(t){var e=this.__data__,r=St(e,t);return!(r<0||(r==e.length-1?e.pop():it.call(e,r,1),--this.size,0))},Ct.prototype.get=function(t){var e=this.__data__,r=St(e,t);return r<0?void 0:e[r][1]},Ct.prototype.has=function(t){return St(this.__data__,t)>-1},Ct.prototype.set=function(t,e){var r=this.__data__,n=St(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},It.prototype.clear=function(){this.size=0,this.__data__={hash:new _t,map:new(ft||Ct),string:new _t}},It.prototype.delete=function(t){var e=Nt(this,t).delete(t);return this.size-=e?1:0,e},It.prototype.get=function(t){return Nt(this,t).get(t)},It.prototype.has=function(t){return Nt(this,t).has(t)},It.prototype.set=function(t,e){var r=Nt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},Pt.prototype.add=Pt.prototype.push=function(t){return this.__data__.set(t,o),this},Pt.prototype.has=function(t){return this.__data__.has(t)},At.prototype.clear=function(){this.__data__=new Ct,this.size=0},At.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},At.prototype.get=function(t){return this.__data__.get(t)},At.prototype.has=function(t){return this.__data__.has(t)},At.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Ct){var o=r.__data__;if(!ft||o.length<n-1)return o.push([t,e]),this.size=++r.size,this;r=this.__data__=new It(o)}return r.set(t,e),this.size=r.size,this};var Vt=ut?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var a=t[r];e(a,r,t)&&(i[o++]=a)}return i}(ut(t),function(e){return ot.call(t,e)}))}:function(){return[]},zt=Tt;function Rt(t,e){return!!(e=null==e?u:e)&&("number"==typeof t||S.test(t))&&t>-1&&t%1==0&&t<e}function Ut(t){if(null!=t){try{return q.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Kt(t,e){return t===e||t!=t&&e!=e}(lt&&zt(new lt(new ArrayBuffer(1)))!=A||ft&&zt(new ft)!=y||pt&&"[object Promise]"!=zt(pt.resolve())||ht&&zt(new ht)!=O||dt&&"[object WeakMap]"!=zt(new dt))&&(zt=function(t){var e=Tt(t),r=e==m?t.constructor:void 0,n=r?Ut(r):"";if(n)switch(n){case yt:return A;case vt:return y;case bt:return"[object Promise]";case mt:return O;case wt:return"[object WeakMap]"}return e});var Gt=kt(function(){return arguments}())?kt:function(t){return qt(t)&&Y.call(t,"callee")&&!ot.call(t,"callee")},Ht=Array.isArray;var Wt=ct||function(){return!1};function Jt(t){if(!Qt(t))return!1;var e=Tt(t);return e==d||e==g||e==l||e==w}function $t(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=u}function Qt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function qt(t){return null!=t&&"object"==typeof t}var Yt=V?function(t){return function(e){return t(e)}}(V):function(t){return qt(t)&&$t(t.length)&&!!T[Tt(t)]};function Xt(t){return null!=(e=t)&&$t(e.length)&&!Jt(e)?Dt(t):Ft(t);var e}r.exports=function(t,e){return Et(t,e)}}).call(this,r(9),r(10)(t))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){var n,o,i,a=function(){var t=function(t,e){var r=t,n=c[e],o=null,i=0,a=null,u=[],s={},l=function(t,e){o=function(t){for(var e=new Array(t),r=0;r<t;r+=1){e[r]=new Array(t);for(var n=0;n<t;n+=1)e[r][n]=null}return e}(i=4*r+17),f(0,0),f(i-7,0),f(0,i-7),h(),p(),g(t,e),r>=7&&d(t),null==a&&(a=b(r,n,u)),y(a,e)},f=function(t,e){for(var r=-1;r<=7;r+=1)if(!(t+r<=-1||i<=t+r))for(var n=-1;n<=7;n+=1)e+n<=-1||i<=e+n||(o[t+r][e+n]=0<=r&&r<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==r||6==r)||2<=r&&r<=4&&2<=n&&n<=4)},p=function(){for(var t=8;t<i-8;t+=1)null==o[t][6]&&(o[t][6]=t%2==0);for(var e=8;e<i-8;e+=1)null==o[6][e]&&(o[6][e]=e%2==0)},h=function(){for(var t=v.getPatternPosition(r),e=0;e<t.length;e+=1)for(var n=0;n<t.length;n+=1){var i=t[e],a=t[n];if(null==o[i][a])for(var u=-2;u<=2;u+=1)for(var c=-2;c<=2;c+=1)o[i+u][a+c]=-2==u||2==u||-2==c||2==c||0==u&&0==c}},d=function(t){for(var e=v.getBCHTypeNumber(r),n=0;n<18;n+=1){var a=!t&&1==(e>>n&1);o[Math.floor(n/3)][n%3+i-8-3]=a}for(n=0;n<18;n+=1){a=!t&&1==(e>>n&1);o[n%3+i-8-3][Math.floor(n/3)]=a}},g=function(t,e){for(var r=n<<3|e,a=v.getBCHTypeInfo(r),u=0;u<15;u+=1){var c=!t&&1==(a>>u&1);u<6?o[u][8]=c:u<8?o[u+1][8]=c:o[i-15+u][8]=c}for(u=0;u<15;u+=1){c=!t&&1==(a>>u&1);u<8?o[8][i-u-1]=c:u<9?o[8][15-u-1+1]=c:o[8][15-u-1]=c}o[i-8][8]=!t},y=function(t,e){for(var r=-1,n=i-1,a=7,u=0,c=v.getMaskFunction(e),s=i-1;s>0;s-=2)for(6==s&&(s-=1);;){for(var l=0;l<2;l+=1)if(null==o[n][s-l]){var f=!1;u<t.length&&(f=1==(t[u]>>>a&1)),c(n,s-l)&&(f=!f),o[n][s-l]=f,-1==(a-=1)&&(u+=1,a=7)}if((n+=r)<0||i<=n){n-=r,r=-r;break}}},b=function(t,e,r){for(var n=w.getRSBlocks(t,e),o=j(),i=0;i<r.length;i+=1){var a=r[i];o.put(a.getMode(),4),o.put(a.getLength(),v.getLengthInBits(a.getMode(),t)),a.write(o)}var u=0;for(i=0;i<n.length;i+=1)u+=n[i].dataCount;if(o.getLengthInBits()>8*u)throw"code length overflow. ("+o.getLengthInBits()+">"+8*u+")";for(o.getLengthInBits()+4<=8*u&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(!1);for(;!(o.getLengthInBits()>=8*u||(o.put(236,8),o.getLengthInBits()>=8*u));)o.put(17,8);return function(t,e){for(var r=0,n=0,o=0,i=new Array(e.length),a=new Array(e.length),u=0;u<e.length;u+=1){var c=e[u].dataCount,s=e[u].totalCount-c;n=Math.max(n,c),o=Math.max(o,s),i[u]=new Array(c);for(var l=0;l<i[u].length;l+=1)i[u][l]=255&t.getBuffer()[l+r];r+=c;var f=v.getErrorCorrectPolynomial(s),p=m(i[u],f.getLength()-1).mod(f);for(a[u]=new Array(f.getLength()-1),l=0;l<a[u].length;l+=1){var h=l+p.getLength()-a[u].length;a[u][l]=h>=0?p.getAt(h):0}}var d=0;for(l=0;l<e.length;l+=1)d+=e[l].totalCount;var g=new Array(d),y=0;for(l=0;l<n;l+=1)for(u=0;u<e.length;u+=1)l<i[u].length&&(g[y]=i[u][l],y+=1);for(l=0;l<o;l+=1)for(u=0;u<e.length;u+=1)l<a[u].length&&(g[y]=a[u][l],y+=1);return g}(o,n)};s.addData=function(t,e){var r=null;switch(e=e||"Byte"){case"Numeric":r=O(t);break;case"Alphanumeric":r=_(t);break;case"Byte":r=C(t);break;case"Kanji":r=I(t);break;default:throw"mode:"+e}u.push(r),a=null},s.isDark=function(t,e){if(t<0||i<=t||e<0||i<=e)throw t+","+e;return o[t][e]},s.getModuleCount=function(){return i},s.make=function(){if(r<1){for(var t=1;t<40;t++){for(var e=w.getRSBlocks(t,n),o=j(),i=0;i<u.length;i++){var a=u[i];o.put(a.getMode(),4),o.put(a.getLength(),v.getLengthInBits(a.getMode(),t)),a.write(o)}var c=0;for(i=0;i<e.length;i++)c+=e[i].dataCount;if(o.getLengthInBits()<=8*c)break}r=t}l(!1,function(){for(var t=0,e=0,r=0;r<8;r+=1){l(!0,r);var n=v.getLostPoint(s);(0==r||t>n)&&(t=n,e=r)}return e}())},s.createTableTag=function(t,e){t=t||2;var r="";r+='<table style="',r+=" border-width: 0px; border-style: none;",r+=" border-collapse: collapse;",r+=" padding: 0px; margin: "+(e=void 0===e?4*t:e)+"px;",r+='">',r+="<tbody>";for(var n=0;n<s.getModuleCount();n+=1){r+="<tr>";for(var o=0;o<s.getModuleCount();o+=1)r+='<td style="',r+=" border-width: 0px; border-style: none;",r+=" border-collapse: collapse;",r+=" padding: 0px; margin: 0px;",r+=" width: "+t+"px;",r+=" height: "+t+"px;",r+=" background-color: ",r+=s.isDark(n,o)?"#000000":"#ffffff",r+=";",r+='"/>';r+="</tr>"}return r+="</tbody>",r+="</table>"},s.createSvgTag=function(t,e){var r={};"object"==typeof arguments[0]&&(t=(r=arguments[0]).cellSize,e=r.margin),t=t||2,e=void 0===e?4*t:e;var n,o,i,a,u=s.getModuleCount()*t+2*e,c="";for(a="l"+t+",0 0,"+t+" -"+t+",0 0,-"+t+"z ",c+='<svg version="1.1" xmlns="http://www.w3.org/2000/svg"',c+=r.scalable?"":' width="'+u+'px" height="'+u+'px"',c+=' viewBox="0 0 '+u+" "+u+'" ',c+=' preserveAspectRatio="xMinYMin meet">',c+='<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>',c+='<path d="',o=0;o<s.getModuleCount();o+=1)for(i=o*t+e,n=0;n<s.getModuleCount();n+=1)s.isDark(o,n)&&(c+="M"+(n*t+e)+","+i+a);return c+='" stroke="transparent" fill="black"/>',c+="</svg>"},s.createDataURL=function(t,e){t=t||2,e=void 0===e?4*t:e;var r=s.getModuleCount()*t+2*e,n=e,o=r-e;return D(r,r,function(e,r){if(n<=e&&e<o&&n<=r&&r<o){var i=Math.floor((e-n)/t),a=Math.floor((r-n)/t);return s.isDark(a,i)?0:1}return 1})},s.createImgTag=function(t,e,r){t=t||2,e=void 0===e?4*t:e;var n=s.getModuleCount()*t+2*e,o="";return o+="<img",o+=' src="',o+=s.createDataURL(t,e),o+='"',o+=' width="',o+=n,o+='"',o+=' height="',o+=n,o+='"',r&&(o+=' alt="',o+=r,o+='"'),o+="/>"};return s.createASCII=function(t,e){if((t=t||1)<2)return function(t){t=void 0===t?2:t;var e,r,n,o,i,a=1*s.getModuleCount()+2*t,u=t,c=a-t,l={"██":"█","█ ":"▀"," █":"▄","  ":" "},f={"██":"▀","█ ":"▀"," █":" ","  ":" "},p="";for(e=0;e<a;e+=2){for(n=Math.floor((e-u)/1),o=Math.floor((e+1-u)/1),r=0;r<a;r+=1)i="█",u<=r&&r<c&&u<=e&&e<c&&s.isDark(n,Math.floor((r-u)/1))&&(i=" "),u<=r&&r<c&&u<=e+1&&e+1<c&&s.isDark(o,Math.floor((r-u)/1))?i+=" ":i+="█",p+=t<1&&e+1>=c?f[i]:l[i];p+="\n"}return a%2&&t>0?p.substring(0,p.length-a-1)+Array(a+1).join("▀"):p.substring(0,p.length-1)}(e);t-=1,e=void 0===e?2*t:e;var r,n,o,i,a=s.getModuleCount()*t+2*e,u=e,c=a-e,l=Array(t+1).join("██"),f=Array(t+1).join("  "),p="",h="";for(r=0;r<a;r+=1){for(o=Math.floor((r-u)/t),h="",n=0;n<a;n+=1)i=1,u<=n&&n<c&&u<=r&&r<c&&s.isDark(o,Math.floor((n-u)/t))&&(i=0),h+=i?l:f;for(o=0;o<t;o+=1)p+=h+"\n"}return p.substring(0,p.length-1)},s.renderTo2dContext=function(t,e){e=e||2;for(var r=s.getModuleCount(),n=0;n<r;n++)for(var o=0;o<r;o++)t.fillStyle=s.isDark(n,o)?"black":"white",t.fillRect(n*e,o*e,e,e)},s};t.stringToBytes=(t.stringToBytesFuncs={default:function(t){for(var e=[],r=0;r<t.length;r+=1){var n=t.charCodeAt(r);e.push(255&n)}return e}}).default,t.createStringToBytes=function(t,e){var r=function(){for(var r=A(t),n=function(){var t=r.read();if(-1==t)throw"eof";return t},o=0,i={};;){var a=r.read();if(-1==a)break;var u=n(),c=n()<<8|n();i[String.fromCharCode(a<<8|u)]=c,o+=1}if(o!=e)throw o+" != "+e;return i}(),n="?".charCodeAt(0);return function(t){for(var e=[],o=0;o<t.length;o+=1){var i=t.charCodeAt(o);if(i<128)e.push(i);else{var a=r[t.charAt(o)];"number"==typeof a?(255&a)==a?e.push(a):(e.push(a>>>8),e.push(255&a)):e.push(n)}}return e}};var e,r,n,o=1,i=2,a=4,u=8,c={L:1,M:0,Q:3,H:2},s=0,l=1,f=2,p=3,h=4,d=5,g=6,y=7,v=(e=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],n=function(t){for(var e=0;0!=t;)e+=1,t>>>=1;return e},(r={}).getBCHTypeInfo=function(t){for(var e=t<<10;n(e)-n(1335)>=0;)e^=1335<<n(e)-n(1335);return 21522^(t<<10|e)},r.getBCHTypeNumber=function(t){for(var e=t<<12;n(e)-n(7973)>=0;)e^=7973<<n(e)-n(7973);return t<<12|e},r.getPatternPosition=function(t){return e[t-1]},r.getMaskFunction=function(t){switch(t){case s:return function(t,e){return(t+e)%2==0};case l:return function(t,e){return t%2==0};case f:return function(t,e){return e%3==0};case p:return function(t,e){return(t+e)%3==0};case h:return function(t,e){return(Math.floor(t/2)+Math.floor(e/3))%2==0};case d:return function(t,e){return t*e%2+t*e%3==0};case g:return function(t,e){return(t*e%2+t*e%3)%2==0};case y:return function(t,e){return(t*e%3+(t+e)%2)%2==0};default:throw"bad maskPattern:"+t}},r.getErrorCorrectPolynomial=function(t){for(var e=m([1],0),r=0;r<t;r+=1)e=e.multiply(m([1,b.gexp(r)],0));return e},r.getLengthInBits=function(t,e){if(1<=e&&e<10)switch(t){case o:return 10;case i:return 9;case a:case u:return 8;default:throw"mode:"+t}else if(e<27)switch(t){case o:return 12;case i:return 11;case a:return 16;case u:return 10;default:throw"mode:"+t}else{if(!(e<41))throw"type:"+e;switch(t){case o:return 14;case i:return 13;case a:return 16;case u:return 12;default:throw"mode:"+t}}},r.getLostPoint=function(t){for(var e=t.getModuleCount(),r=0,n=0;n<e;n+=1)for(var o=0;o<e;o+=1){for(var i=0,a=t.isDark(n,o),u=-1;u<=1;u+=1)if(!(n+u<0||e<=n+u))for(var c=-1;c<=1;c+=1)o+c<0||e<=o+c||0==u&&0==c||a==t.isDark(n+u,o+c)&&(i+=1);i>5&&(r+=3+i-5)}for(n=0;n<e-1;n+=1)for(o=0;o<e-1;o+=1){var s=0;t.isDark(n,o)&&(s+=1),t.isDark(n+1,o)&&(s+=1),t.isDark(n,o+1)&&(s+=1),t.isDark(n+1,o+1)&&(s+=1),0!=s&&4!=s||(r+=3)}for(n=0;n<e;n+=1)for(o=0;o<e-6;o+=1)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(r+=40);for(o=0;o<e;o+=1)for(n=0;n<e-6;n+=1)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(r+=40);var l=0;for(o=0;o<e;o+=1)for(n=0;n<e;n+=1)t.isDark(n,o)&&(l+=1);return r+=Math.abs(100*l/e/e-50)/5*10},r),b=function(){for(var t=new Array(256),e=new Array(256),r=0;r<8;r+=1)t[r]=1<<r;for(r=8;r<256;r+=1)t[r]=t[r-4]^t[r-5]^t[r-6]^t[r-8];for(r=0;r<255;r+=1)e[t[r]]=r;var n={glog:function(t){if(t<1)throw"glog("+t+")";return e[t]},gexp:function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return t[e]}};return n}();function m(t,e){if(void 0===t.length)throw t.length+"/"+e;var r=function(){for(var r=0;r<t.length&&0==t[r];)r+=1;for(var n=new Array(t.length-r+e),o=0;o<t.length-r;o+=1)n[o]=t[o+r];return n}(),n={getAt:function(t){return r[t]},getLength:function(){return r.length},multiply:function(t){for(var e=new Array(n.getLength()+t.getLength()-1),r=0;r<n.getLength();r+=1)for(var o=0;o<t.getLength();o+=1)e[r+o]^=b.gexp(b.glog(n.getAt(r))+b.glog(t.getAt(o)));return m(e,0)},mod:function(t){if(n.getLength()-t.getLength()<0)return n;for(var e=b.glog(n.getAt(0))-b.glog(t.getAt(0)),r=new Array(n.getLength()),o=0;o<n.getLength();o+=1)r[o]=n.getAt(o);for(o=0;o<t.getLength();o+=1)r[o]^=b.gexp(b.glog(t.getAt(o))+e);return m(r,0).mod(t)}};return n}var w=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],e=function(t,e){var r={};return r.totalCount=t,r.dataCount=e,r},r={};return r.getRSBlocks=function(r,n){var o=function(e,r){switch(r){case c.L:return t[4*(e-1)+0];case c.M:return t[4*(e-1)+1];case c.Q:return t[4*(e-1)+2];case c.H:return t[4*(e-1)+3];default:return}}(r,n);if(void 0===o)throw"bad rs block @ typeNumber:"+r+"/errorCorrectionLevel:"+n;for(var i=o.length/3,a=[],u=0;u<i;u+=1)for(var s=o[3*u+0],l=o[3*u+1],f=o[3*u+2],p=0;p<s;p+=1)a.push(e(l,f));return a},r}(),j=function(){var t=[],e=0,r={getBuffer:function(){return t},getAt:function(e){var r=Math.floor(e/8);return 1==(t[r]>>>7-e%8&1)},put:function(t,e){for(var n=0;n<e;n+=1)r.putBit(1==(t>>>e-n-1&1))},getLengthInBits:function(){return e},putBit:function(r){var n=Math.floor(e/8);t.length<=n&&t.push(0),r&&(t[n]|=128>>>e%8),e+=1}};return r},O=function(t){var e=o,r=t,n={getMode:function(){return e},getLength:function(t){return r.length},write:function(t){for(var e=r,n=0;n+2<e.length;)t.put(i(e.substring(n,n+3)),10),n+=3;n<e.length&&(e.length-n==1?t.put(i(e.substring(n,n+1)),4):e.length-n==2&&t.put(i(e.substring(n,n+2)),7))}},i=function(t){for(var e=0,r=0;r<t.length;r+=1)e=10*e+a(t.charAt(r));return e},a=function(t){if("0"<=t&&t<="9")return t.charCodeAt(0)-"0".charCodeAt(0);throw"illegal char :"+t};return n},_=function(t){var e=i,r=t,n={getMode:function(){return e},getLength:function(t){return r.length},write:function(t){for(var e=r,n=0;n+1<e.length;)t.put(45*o(e.charAt(n))+o(e.charAt(n+1)),11),n+=2;n<e.length&&t.put(o(e.charAt(n)),6)}},o=function(t){if("0"<=t&&t<="9")return t.charCodeAt(0)-"0".charCodeAt(0);if("A"<=t&&t<="Z")return t.charCodeAt(0)-"A".charCodeAt(0)+10;switch(t){case" ":return 36;case"$":return 37;case"%":return 38;case"*":return 39;case"+":return 40;case"-":return 41;case".":return 42;case"/":return 43;case":":return 44;default:throw"illegal char :"+t}};return n},C=function(e){var r=a,n=t.stringToBytes(e),o={getMode:function(){return r},getLength:function(t){return n.length},write:function(t){for(var e=0;e<n.length;e+=1)t.put(n[e],8)}};return o},I=function(e){var r=u,n=t.stringToBytesFuncs.SJIS;if(!n)throw"sjis not supported.";!function(t,e){var r=n("友");if(2!=r.length||38726!=(r[0]<<8|r[1]))throw"sjis not supported."}();var o=n(e),i={getMode:function(){return r},getLength:function(t){return~~(o.length/2)},write:function(t){for(var e=o,r=0;r+1<e.length;){var n=(255&e[r])<<8|255&e[r+1];if(33088<=n&&n<=40956)n-=33088;else{if(!(57408<=n&&n<=60351))throw"illegal char at "+(r+1)+"/"+n;n-=49472}n=192*(n>>>8&255)+(255&n),t.put(n,13),r+=2}if(r<e.length)throw"illegal char at "+(r+1)}};return i},P=function(){var t=[],e={writeByte:function(e){t.push(255&e)},writeShort:function(t){e.writeByte(t),e.writeByte(t>>>8)},writeBytes:function(t,r,n){r=r||0,n=n||t.length;for(var o=0;o<n;o+=1)e.writeByte(t[o+r])},writeString:function(t){for(var r=0;r<t.length;r+=1)e.writeByte(t.charCodeAt(r))},toByteArray:function(){return t},toString:function(){var e="";e+="[";for(var r=0;r<t.length;r+=1)r>0&&(e+=","),e+=t[r];return e+="]"}};return e},A=function(t){var e=t,r=0,n=0,o=0,i={read:function(){for(;o<8;){if(r>=e.length){if(0==o)return-1;throw"unexpected end of file./"+o}var t=e.charAt(r);if(r+=1,"="==t)return o=0,-1;t.match(/^\s$/)||(n=n<<6|a(t.charCodeAt(0)),o+=6)}var i=n>>>o-8&255;return o-=8,i}},a=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw"c:"+t};return i},D=function(t,e,r){for(var n=function(t,e){var r=t,n=e,o=new Array(t*e),i={setPixel:function(t,e,n){o[e*r+t]=n},write:function(t){t.writeString("GIF87a"),t.writeShort(r),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(","),t.writeShort(0),t.writeShort(0),t.writeShort(r),t.writeShort(n),t.writeByte(0);var e=a(2);t.writeByte(2);for(var o=0;e.length-o>255;)t.writeByte(255),t.writeBytes(e,o,255),o+=255;t.writeByte(e.length-o),t.writeBytes(e,o,e.length-o),t.writeByte(0),t.writeString(";")}},a=function(t){for(var e=1<<t,r=1+(1<<t),n=t+1,i=u(),a=0;a<e;a+=1)i.add(String.fromCharCode(a));i.add(String.fromCharCode(e)),i.add(String.fromCharCode(r));var c,s,l,f=P(),p=(c=f,s=0,l=0,{write:function(t,e){if(t>>>e!=0)throw"length over";for(;s+e>=8;)c.writeByte(255&(t<<s|l)),e-=8-s,t>>>=8-s,l=0,s=0;l|=t<<s,s+=e},flush:function(){s>0&&c.writeByte(l)}});p.write(e,n);var h=0,d=String.fromCharCode(o[h]);for(h+=1;h<o.length;){var g=String.fromCharCode(o[h]);h+=1,i.contains(d+g)?d+=g:(p.write(i.indexOf(d),n),i.size()<4095&&(i.size()==1<<n&&(n+=1),i.add(d+g)),d=g)}return p.write(i.indexOf(d),n),p.write(r,n),p.flush(),f.toByteArray()},u=function(){var t={},e=0,r={add:function(n){if(r.contains(n))throw"dup key:"+n;t[n]=e,e+=1},size:function(){return e},indexOf:function(e){return t[e]},contains:function(e){return void 0!==t[e]}};return r};return i}(t,e),o=0;o<e;o+=1)for(var i=0;i<t;i+=1)n.setPixel(i,o,r(i,o));var a=P();n.write(a);for(var u,c,s,l,f,p,h,d=(u=0,c=0,s=0,l="",p=function(t){l+=String.fromCharCode(h(63&t))},h=function(t){if(t<0);else{if(t<26)return 65+t;if(t<52)return t-26+97;if(t<62)return t-52+48;if(62==t)return 43;if(63==t)return 47}throw"n:"+t},(f={}).writeByte=function(t){for(u=u<<8|255&t,c+=8,s+=1;c>=6;)p(u>>>c-6),c-=6},f.flush=function(){if(c>0&&(p(u<<6-c),u=0,c=0),s%3!=0)for(var t=3-s%3,e=0;e<t;e+=1)l+="="},f.toString=function(){return l},f),g=a.toByteArray(),y=0;y<g.length;y+=1)d.writeByte(g[y]);return d.flush(),"data:image/gif;base64,"+d};return t}();a.stringToBytesFuncs["UTF-8"]=function(t){return function(t){for(var e=[],r=0;r<t.length;r++){var n=t.charCodeAt(r);n<128?e.push(n):n<2048?e.push(192|n>>6,128|63&n):n<55296||n>=57344?e.push(224|n>>12,128|n>>6&63,128|63&n):(r++,n=65536+((1023&n)<<10|1023&t.charCodeAt(r)),e.push(240|n>>18,128|n>>12&63,128|n>>6&63,128|63&n))}return e}(t)},o=[],void 0===(i="function"==typeof(n=function(){return a})?n.apply(e,o):n)||(t.exports=i)},function(t,e){t.exports=ReactDOM},function(t,e,r){},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(a,u)}c((n=n.apply(t,e||[])).next())})},a=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return[4,t.prototype.componentDidMount.call(this)];case 1:return e.sent(),[4,this.dontGetValues()];case 2:return e.sent(),[2]}})})},e}(r(15).FlowBaseComponent);e.FlowComponent=u},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(a,u)}c((n=n.apply(t,e||[])).next())})},a=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=r(1),c=r(3),s=r(4),l=r(0),f=r(2),p=r(17),h=function(t){function e(e){var r=t.call(this,e)||this;r.IsLoading=!0,r.Fields={},r.LoadingState="initial",r.getValues=r.getValues.bind(r),r.dontGetValues=r.dontGetValues.bind(r),r.updateValues=r.updateValues.bind(r),r.triggerOutcome=r.triggerOutcome.bind(r),r.ComponentId=r.props.id,r.ParentId=r.props.parentId,r.FlowKey=r.props.flowKey,r.Attributes={};var n=manywho.model.getComponent(r.ComponentId,r.FlowKey);r.Model={dataSource:new f.FlowObjectDataArray([]),developerName:n.developerName,enabled:n.isEnabled,height:n.height,helpInfo:n.helpInfo,hintInfo:n.hintInfo,joinUri:r.joinURI,label:n.label,maxSize:n.maxSize,multiSelect:n.isMultiSelect,readOnly:!n.isEditable,required:n.isRequired,size:n.size,validationMessage:n.validationMessage,visible:n.isVisible,width:n.width};var o=n.objectData;if(o)for(var i=0,a=o;i<a.length;i++){var u=a[i];r.Model.dataSource.addItem(new l.FlowObjectData([u]))}var s=n.attributes;if(s)for(var h=0,d=Object.keys(s);h<d.length;h++){var g=d[h];r.Attributes[g]=new c.FlowAttribute(g,s[g])}r.Outcomes={};for(var y=manywho.model.getOutcomes(r.props.id,r.props.flowKey),v=0,b=y;v<b.length;v++){var m=b[v];r.Outcomes[m.developerName]=new p.FlowOutcome(m)}for(var w=0,j=y=manywho.model.getOutcomes(null,r.props.flowKey);w<j.length;w++){m=j[w];r.Outcomes[m.developerName]=new p.FlowOutcome(m)}var O=manywho.settings.global("platform.uri")||"https://flow.manywho.com";return r.StateId=manywho.utils.extractStateId(r.props.flowKey),r.TenantId=manywho.utils.extractTenantId(r.props.flowKey),r.url=O+"/api/run/1/state/"+r.StateId+"/values",r.userurl=O+"/api/run/1/state/"+r.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",r}return o(e,t),Object.defineProperty(e.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLoading",{get:function(){return this.IsLoading},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),e.prototype.getAttribute=function(t,e){return this.attributes[t]?this.attributes[t].value:e||""},e.prototype.componentDidMount=function(){return i(this,void 0,void 0,function(){var t,e,r,n;return a(this,function(o){switch(t=manywho.model.getComponent(this.ComponentId,this.FlowKey),e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t.contentType){case"ContentObject":case"ContentList":r=void 0,r=e.objectData?e.objectData:t.objectData,r=JSON.parse(JSON.stringify(r)),n={objectData:r},manywho.state.setComponent(this.componentId,n,this.flowKey,!0);break;default:e.contentValue=t.contentValue}return manywho.utils.removeLoadingIndicator("loader"),[2]})})},e.prototype.getValues=function(){return i(this,void 0,void 0,function(){var t,e,r,n=this;return a(this,function(o){switch(o.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),this.Fields={},[4,manywho.connection.request(this,null,this.url,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return(o.sent()||[]).map(function(t){n.Fields[t.developerName]=new s.FlowField(t)}),[4,manywho.connection.request(this,null,this.userurl,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 2:return t=o.sent(),e=new s.FlowField(t),r=e.value.properties,this.User={directoryId:r["Directory Id"].value,directoryName:r["Directory Name"].value,email:r.Email.value||"mark",firstName:r["First Name"].value,groupId:r["Primary Group Id"].value,groupName:r["Primary Group Name"].value,id:r["User ID"].value,ipAddress:r["IP Address"].value,language:r.Language.value,lastName:r["Last Name"].value,location:r.Location.value,roleId:r["Role Id"].value,roleName:r["Role Name"].value,status:r.Status.value,userName:r.Username.value},this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]}})})},e.prototype.dontGetValues=function(){return i(this,void 0,void 0,function(){return a(this,function(t){return this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]})})},e.prototype.getStateValue=function(){var t=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new l.FlowObjectData(t.objectData[0]);case"ContentList":return new f.FlowObjectDataArray(t.objectData);default:return t.contentValue}},e.prototype.setStateValue=function(t){return i(this,void 0,void 0,function(){var e,r,n,o;return a(this,function(i){switch(e=manywho.model.getComponent(this.ComponentId,this.FlowKey),r=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":n=JSON.parse(JSON.stringify(t.iFlowObjectDataArray)),manywho.state.setComponent(this.componentId,n,this.flowKey,!0);break;case"ContentList":o=JSON.parse(JSON.stringify(t.iFlowObjectDataArray)),manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":r.contentValue=t.toISOString();break;default:r.contentValue=t}return[2]})})},e.prototype.updateValues=function(t){return i(this,void 0,void 0,function(){var e,r,n,o;return a(this,function(i){switch(i.label){case 0:for(this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),e=[],r=0,n=t;r<n.length;r++)o=n[r],e.push(o.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),e)];case 1:return i.sent(),[2]}})})},e.prototype.triggerOutcome=function(t,e){return i(this,void 0,void 0,function(){var r;return a(this,function(n){switch(n.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),e||(e=null),this.outcomes[t]&&(r=this.outcomes[t].iFlowOutcome()),r?[4,manywho.component.onOutcome(r,e,this.FlowKey)]:[3,2];case 1:return n.sent(),[3,3];case 2:this.log("Could not find outcome "+t),n.label=3;case 3:return[2]}})})},e.prototype.log=function(t){var e=new Date,r="["+[("0"+e.getHours()).slice(-2),("0"+e.getMinutes()).slice(-2),("0"+e.getSeconds()).slice(-2)].join(":")+"] ";console.log(r+t)},e}(u.Component);e.FlowBaseComponent=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(4),o=r(0),i=r(2),a=function(){function t(t){switch(this.DeveloperName=t.developerName,this.ContentType=n.eContentType[t.contentType],this.ContentFormat=t.contentFormat,this.TypeElementId=t.typeElementId,this.TypeElementPropertyId=t.typeElementPropertyId,this.ContentType){case n.eContentType.ContentObject:this.Value=t.objectData?new o.FlowObjectData(t.objectData):null;break;case n.eContentType.ContentList:this.value=t.objectData?new i.FlowObjectDataArray(t.objectData):new i.FlowObjectDataArray([]);break;default:this.value=t.contentValue}}return t.newInstance=function(t,e,r){var o,i=[];switch(e){case n.eContentType.ContentObject:var a=r;i.push(a.iObjectData());break;case n.eContentType.ContentList:i=r.iFlowObjectDataArray();break;default:o=r}return new this({contentFormat:null,contentType:n.eContentType[e],contentValue:o,developerName:t,objectData:i,typeElementId:null,typeElementPropertyId:null})},Object.defineProperty(t.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(t){this.contentFormat=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"contentType",{get:function(){return this.ContentType},set:function(t){this.ContentType=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(t){this.DeveloperName=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(t){this.TypeElementId=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(t){this.TypeElementPropertyId=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.Value},set:function(t){this.Value=t},enumerable:!0,configurable:!0}),t.prototype.iFlowObjectDataProperty=function(){var t,e=[];switch(this.ContentType){case n.eContentType.ContentObject:var r=this.Value;r&&r.developerName&&r.developerName.length>0&&e.push(r.iObjectData());break;case n.eContentType.ContentList:e=this.Value.iFlowObjectDataArray();break;default:t=this.Value}return{contentFormat:this.ContentFormat,contentType:n.eContentType[this.ContentType],contentValue:t,developerName:this.DeveloperName,objectData:e,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},t}();e.FlowObjectDataProperty=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3);!function(t){t.Save="SAVE",t.PartialSave="PARTIAL_SAVE",t.NoSave="NO_SAVE"}(e.ePageActionBindingType||(e.ePageActionBindingType={})),function(t){t.New="NEW",t.Query="QUERY",t.Insert="INSERT",t.Update="UPDATE",t.Upsert="UPSERT",t.Delete="DELETE",t.Remove="REMOVE",t.Add="ADD",t.Edit="EDIT",t.Next="NEXT",t.Back="BACK",t.Done="DONE",t.Save="SAVE",t.Cancel="CANCEL",t.Apply="APPLY",t.Import="IMPORT",t.Close="CLOSE",t.Open="OPEN",t.Submit="SUBMIT",t.Escalate="ESCALATE",t.Reject="REJECT",t.Delegate="DELEGATE"}(e.ePageActionType||(e.ePageActionType={}));var o=function(){function t(t){if(this.DeveloperName=t.developerName,this.Id=t.id,this.IsBulkAction=t.isBulkAction,this.IsOut=t.isOut,this.Label=t.label,this.Order=t.order,this.PageActionBindingType=t.pageActionBindingType,this.PageActionType=t.pageActionType,this.PageObjectBindingId=t.pageObjectBindingId,this.Attributes={},t.attributes)for(var e=0,r=Object.keys(t.attributes);e<r.length;e++){var o=r[e];this.Attributes[o]=new n.FlowAttribute(o,t.attributes[o])}this.Outcome=t}return Object.defineProperty(t.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),t.prototype.iFlowOutcome=function(){return this.Outcome},t}();e.FlowOutcome=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,